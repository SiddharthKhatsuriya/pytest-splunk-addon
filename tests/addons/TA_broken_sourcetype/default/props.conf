[notvalid]
## The sourcetype doesn't exist
EXTRACT-one = group=(?<extractone>[^,]+)

[splunkd]
# As EVAL-two field is depend on EVAL-one field, two field events will be never present, the test case will fail for two field.
EVAL-one = "working"
EVAL-two = one
EVAL-used_in_extract = "use_this_in_extract"
## source_field from EVAL hence this extract would fail
EXTRACT-incorrect_extract = (?<incorrect_extract>.*) in used_in_extract
## Here in is used as a regex and hotWarmPath is not a SOURCE_KEY hence in should be enclosed as [i]n
## Since in is not enclosed as [i]n, this would fail
EXTRACT-broken_one = (?<broken_extract>.*) [i]n hotWarmPath

# Without lookup name
LOOKUP-test_no_lookup = component OUTPUT context_test

# Lookup does not exist 
LOOKUP-test_nonexistent_lookup = Lookup_NAN component OUTPUT context_test

# Lookup without input field
LOOKUP-test_no_inputfield = ta_ficition_lookup OUTPUT context_test

# Lookup output field doesn't exist
LOOKUP-test_wrong_output = ta_ficition_lookup component output context_test
LOOKUP-test_wrong_outputnew = ta_ficition_lookup component outputnew context_test

# Empty lookup file
LOOKUP-test_empty_csv = empty_lookup component context_test

# Wrong lookup file + no output fields
LOOKUP-test_lookup_not_found = NaN_lookup component context_test

REPORT-tsc-delim-fields = tsc-delim-fields
REPORT-tsc-sk-regex-format = tsc-sk-regex-format
REPORT-tsc-sk-delim-format = contact_mode_extract
# If a non_existing stanza is present then no testcases are generated for it
REPORT-tsc-regex-format = tsc-regex-format, non_existing_transforms_stanza

FIELDALIAS-one = name AS aliasone
FIELDALIAS-two = nofield AS aliasone
FIELDALIAS-three = one AS aliasthree

[source::...notvalid...]
sourcetype = notvalid

[source::...none...]
sourcetype = none

